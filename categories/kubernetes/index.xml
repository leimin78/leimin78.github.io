<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on 开心-Coder</title>
    <link>http://leimin78.github.io/categories/kubernetes/</link>
    <description>Recent content in kubernetes on 开心-Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 11 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://leimin78.github.io/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>为什么需要kubernetes?</title>
      <link>http://leimin78.github.io/post/kubernetes-01/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://leimin78.github.io/post/kubernetes-01/</guid>
      <description>应用部署时代演变   传统的基础架构,应用直接部署在物理机上面。无法对应用进行很好的资源隔离，例如一台物理机器中运行了两个应用程序，其中一个应用程序占用 了大量的系统资源，势必会导致另一个程序的性能下降。如果将应用分开部署到不同的物理机中又会导致物理机的资源浪费，同时管理上也会提升 很多不必要的成本
  虚拟部署时代,借助虚拟化技术的兴起，一台性能强劲的物理机，能够虚拟出多个虚拟机出来，每一台虚拟机都是一个单独的机器，有单独的操作系统。 虚拟机降低了传统基础架构中的硬件成本，因为在虚拟机中需要单独部署操作系统，会造成性能损耗。
  容器部署时代,借助操作系统的内核，对cpu,内存，网络进行，进程，进行隔离，每个容器可以看做是轻量的vm,容器时代，更大的提升了资源的利用率。 同时因为镜像的不可变性，让应用无需关心基础架构，应用架构进行隔离。
   Kubernetes 能干啥？   服务发现，负载均衡： kubernets 可以为内部容器，提供dns,及容器自己的ip来开放自己，如果碰到流量大的容器，可以通过service来对流量进行负载，到不同的容器中。
  存储编排: kubernets 可以挂载本地文件系统，及各类云存储，及常见的开源存储方案
  自动部署和回滚: 可以自定义描述容器的状态，kubernetes会按照定义进行检测，按照定义对容器进行自动的扩展，或回滚操作。
  自我修复: Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。
  秘钥配置管理: Kubernetes 允许您存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。您可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。
  总结， 容器时代应用与基础架构分离，但怎么样大规模的运行不同的容器呢？kubernets 就是容器海洋中的掌舵手，让大规模的容器应用变得更安全，更好管理。</description>
    </item>
    
  </channel>
</rss>